import org.gradle.internal.jvm.Jvm
import java.nio.file.Files

plugins {
    // https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'

    id("net.ltgt.errorprone") version "2.0.2"

     // To show task list as a tree, run: ./gradlew <taskname> taskTree
     id 'com.dorongold.task-tree' version '2.1.0'
}
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

group 'org.checkerframework'
// TODO: Use this in the release process.
version '3.9.15'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// On a Java 8 JVM, use error-prone javac and source/target 8.
// On a Java 9+ JVM, use the host javac, default source/target, and required module flags.
ext.isJava8 = JavaVersion.current() == JavaVersion.VERSION_1_8

ext {
    // The local git repository, typically in the .git directory, but not for worktrees.
    // This value is always overwritten, but Gradle needs the variable to be initialized.
    localRepo = ".git"
}


sourceSets {
    main.java {
        srcDirs = ['src', '../scene-lib/src']
    }
    test.java {
        srcDirs += ['../scene-lib/test']
        include("**/AnnotationsTest.java")
        include("**/foo/*.java")
        include("**/AnnotationVerifier.java")
        include("**/TestSceneLib.java")
        include("**/Example.java")
    }
    test.resources {
        srcDirs += ['../scene-lib/test']
        exclude("**/*.java")
    }
}
configurations {
    javacJar
}

dependencies {
    if (isJava8) {
        ext.errorproneJavacVersion = "9+181-r4173-1"
        javacJar group: 'com.google.errorprone', name: 'javac', version: "$errorproneJavacVersion"
        implementation "com.google.errorprone:javac:$errorproneJavacVersion"
        errorproneJavac("com.google.errorprone:javac:$errorproneJavacVersion")
    }
    implementation 'org.plumelib:bcel-util:1.1.12'
    implementation 'org.plumelib:options:1.0.5'
    implementation 'org.plumelib:plume-util:1.5.5'
    implementation 'org.plumelib:reflection-util:1.0.3'
    // Annotations in checker-qual.jar are used, but no checkers are (currently) run on the code.
    compileOnly 'org.checkerframework:checker-qual:3.15.0'
    implementation 'com.google.errorprone:error_prone_annotations:2.6.0'
    implementation ('org.checkerframework.annotatedlib:guava:30.1.1-jre') {
        // So long as Guava only uses annotations from checker-qual, excluding it should not cause problems.
        exclude group: 'org.checkerframework'
    }
    implementation 'org.ow2.asm:asm:9.2'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation 'org.checkerframework:checker-qual:3.15.0'

    errorprone("com.google.errorprone:error_prone_core:2.7.1")
}


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.failOnError = true
    options.deprecation = true
    options.compilerArgs += [
            '-g',
            '-Werror',
            // To not get a warning about missing bootstrap classpath for Java 8.
            "-Xlint:-options",
            "-Xlint:unchecked",
            "-Xlint",
    ]
    options.encoding = 'UTF-8'

    options.errorprone.disable(
        // Suggests using an ErrorProne-specific annotation
        "InlineMeSuggester",
        // Suggestion assumes there is no overriding equals() method
        "NonOverridingEquals",
    )
}


shadowJar {
    destinationDirectory = projectDir
    includeEmptyDirs = false
    archiveFileName = 'annotation-file-utilities-all.jar'
    // Don't include any class from the Checker Framework.
    // This should just be checker-qual.
    exclude 'org/checkerframework/**'
    doFirst {
        // TODO: The release fails because of this, so skip it for now.
        if (project.hasProperty('release') && false) {
            println 'Relocating packages.'
            relocate 'org.apache', 'org.checkerframework.org.apache'
            relocate 'org.relaxng', 'org.checkerframework.org.relaxng'
            relocate 'org.plumelib', 'org.checkerframework.org.plumelib'
            relocate 'org.objectweb.asm', 'org.checkerframework.org.objectweb.asm'
            relocate 'com.google', 'org.checkerframework.com.google'
        }
    }
}

// Shadowing Test Sources and Dependencies
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task allButJavacJar(type: ShadowJar, dependsOn: compileJava) {
    description 'Builds annotation-file-utilities-all-but-javac.jar with all dependencies except javac.jar.'
    destinationDirectory = projectDir
    includeEmptyDirs = false
    archiveFileName = 'annotation-file-utilities-all-but-javac.jar'

    from shadowJar.source
    configurations  = shadowJar.configurations

    dependencies {
        exclude(dependency('com.google.errorprone:javac:.*'))
    }
    // Don't include any class from the Checker Framework.
    // This should just be checker-qual.
    exclude 'org/checkerframework/**'
    exclude 'javax/**'
    doFirst {
        // TODO: The release fails because of this, so skip it for now.
        if (project.hasProperty('release') && false) {
            println 'Relocating packages.'
            relocate 'org.apache', 'org.checkerframework.org.apache'
            relocate 'org.relaxng', 'org.checkerframework.org.relaxng'
            relocate 'org.plumelib', 'org.checkerframework.org.plumelib'
            relocate 'org.objectweb.asm', 'org.checkerframework.org.objectweb.asm'
            relocate 'com.google', 'org.checkerframework.com.google'
        }
    }
}

task skinnyJar(type: ShadowJar, dependsOn: compileJava) {
    description 'Builds annotation-file-utilities.jar with only scene-lib and annotation-file-utilities classes.'
    includeEmptyDirs = false
    destinationDirectory = projectDir
    archiveFileName = 'annotation-file-utilities.jar'
    include 'scenelib/**/*.class'
    include 'annotator/**/*.class'
}

test {
    testLogging {
        showStandardStreams = true
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and expected diagnostics not found.
        exceptionFormat "full"
        events "failed"
    }

    // After each test, print a summary.
    afterSuite { desc, result ->
        if (desc.getClassName() != null) {
            long mils = result.getEndTime() - result.getStartTime()
            double seconds = mils / 1000.0

            println "Testsuite: ${desc.getClassName()}\n" +
                    "Tests run: ${result.testCount}, " +
                    "Failures: ${result.failedTestCount}, " +
                    "Skipped: ${result.skippedTestCount}, " +
                    "Time elapsed: ${seconds} sec\n"
        }

    }
}
task testExample(dependsOn: compileTestJava, group: 'Verification') {
    description 'Run the scene-lib example test.'
    doLast {
        String testDir = "${projectDir}/../scene-lib/test/annotations/tests/executable/"
        javaexec {
            classpath = files(sourceSets.test.java.outputDir)
            classpath += sourceSets.test.compileClasspath
            mainClass = 'annotations.tests.executable.Example'
            standardOutput = new FileOutputStream("${testDir}/example-stdout.jaif")

            args = ["${testDir}/example-input.jaif",
                    "foo.Bar",
                    "${testDir}/example-output.jaif"]
        }

        byte[] goalJaif = Files.readAllBytes(new File(testDir, "example-output.jaif.goal").toPath());
        byte[] outputJaif = Files.readAllBytes(new File(testDir, "example-output.jaif").toPath());
        if (!Arrays.equals(goalJaif, outputJaif)) {
            throw new GradleException("In ${testDir}, file example-output.jaif does not match goal.")
        }

        byte[] goalStdOut = Files.readAllBytes(new File(testDir, "example-stdout.jaif.goal").toPath());
        byte[] stdOut = Files.readAllBytes(new File(testDir, "example-stdout.jaif").toPath());
        if (!Arrays.equals(goalStdOut, stdOut)) {
            throw new GradleException("In ${testDir}, file example-stdout.jaif does not match goal.")
        }
    }
}

task cleanTestExample {
    description 'Clean the scene-lib example test.'
    doLast {
        String testDir = "${projectDir}/../scene-lib/test/annotations/tests/executable/"
        delete "${testDir}/example-output.jaif"
        delete "${testDir}/example-stdout.jaif"
    }
}

task testAnnotator(type: Exec, dependsOn: assemble, group: 'Verification') {
    description 'Run the annotator test.'
    workingDir "${projectDir}/tests/"
    executable 'make'
}

task cleanTestAnnotator(type: Exec) {
    description "Clean the annotator test."
    workingDir 'tests/'
    executable 'make'
    args("clean")
}

ext.plumeBibHome = "${projectDir}/plume-bib"

task getPlumeBib() {
    description 'Obtain or update the run-google-java-format scripts.'
    if (file(plumeBibHome).exists()) {
        exec {
            workingDir plumeBibHome
            executable 'git'
            args = ['pull', '-q']
            ignoreExitValue = true
        }
    } else {
        exec {
            workingDir "${plumeBibHome}/../"
            executable 'git'
            args = ['clone', '-q', 'https://github.com/mernst/plume-bib.git']
        }
    }
}



task makeAnnotationFileFormat(dependsOn: getPlumeBib) {
    description 'Make documentation: annotation-file-format.{html,pdf}.'
    doLast {
        exec {
            executable 'make'
            args = [
                    '-C',
                    'figures'
            ]
        }
        exec {
            executable 'latex'
            args 'annotation-file-format.tex'
        }

        exec {
            executable 'bibtex'
            args 'annotation-file-format'
            environment BIBINPUTS: ".:${plumeBibHome}"
        }

        exec {
            executable 'latex'
            args 'annotation-file-format.tex'
        }

        exec {
            executable 'latex'
            args 'annotation-file-format.tex'
        }

        exec {
            executable 'pdflatex'
            args 'annotation-file-format.tex'
        }

        exec {
            executable 'hevea'
            args = [
                    "-fix",
                    "-exec",
                    "xxdate.exe",
                    "urlhref.hva",
                    "annotation-file-format.tex"
            ]
        }
    }
}

task cleanAnnotationFileFormat {
    description "Removes generated documentation files."

    doLast {
        delete "annotation-file-format.aux"
        delete "annotation-file-format.dvi"
        delete "annotation-file-format.haux"
        delete "annotation-file-format.html"
        delete "annotation-file-format.htoc"
        delete "annotation-file-format.log"
        delete "annotation-file-format.pdf"
        delete "annotation-file-format.toc"
        delete "scene-lib-type-hierarchy.png"
        exec {
            executable 'make'
            args = [
                    '-C',
                    'figures',
                    'clean'
            ]
        }
    }
}

// Copied from Checker Framework
task checkBasicStyle(group: 'Format') {
    description 'Check basic style guidelines.  Not related to Checkstyle tool.'

    String[] ignoreDirectories = ['.git',
                                  '.gradle',
                                  '.idea',
                                  '.plume-scripts',
                                  'annotated',
                                  'api',
                                  'plume-bib',
                                  'build',
                                  'jdk',
                                  'javadoc',
                                  "tests"]

    String[] ignoreFilePatterns = [
            '*.aux',
            '*.class',
            '*.dvi',
            '*.eps',
            '*.jaif',
            '*.jar',
            '*.jtr',
            '*.log',
            '*.patch',
            '*.pdf',
            '*.png',
            '*.sty',
            '*.zip',
            '*~',
            '*.goal',
            '*.jaif',
            'CFLogo.ai',
            'logfile.log.rec.index',
            'annotation-file-format.html']

    doLast {
        FileTree tree = fileTree(dir: "${projectDir}/../")
        for (String dir : ignoreDirectories) {
            tree.exclude "**/${dir}/**"
        }
        for (String file : ignoreFilePatterns) {
            tree.exclude "**/${file}"
        }
        boolean failed = false
        tree.visit {
            if (!it.file.isDirectory()) {
                int isBlankLine
                it.file.eachLine { line ->
                    if (line.endsWith(' ')) {
                        println("Trailing whitespace: ${it.file.absolutePath}")
                        failed = true
                    }
                    if (!line.startsWith('\\') &&
                            (line.matches('^.* (else|finally|try)\\{}.*$')
                                    || line.matches('^.*}(catch|else|finally) .*$')
                                    || line.matches('^.* (catch|for|if|while)\\('))) {
                        // This runs on non-java files, too.
                        println("Missing space: ${it.file.absolutePath}")
                        failed = true
                    }
                    if (line.isEmpty()) {
                        isBlankLine++;
                    } else {
                        isBlankLine = 0;
                    }
                }

                if (isBlankLine > 1) {
                    println("Blank line at end of file: ${it.file.absolutePath}")
                    failed = true
                }

                RandomAccessFile file
                try {
                    file = new RandomAccessFile(it.file, 'r')
                    int end = file.length() - 1;
                    if (end > 0) {
                        file.seek(end)
                        byte last = file.readByte()
                        if (last != '\n') {
                            println("Missing newline at end of file: ${it.file.absolutePath}")
                            failed = true
                        }
                    }
                } finally {
                    if (file != null) {
                        file.close()
                    }
                }
            }
        }
        if (failed) {
            throw new GradleException("Files do not meet basic style guidelines.")
        }
    }
}

/**
 * Creates a task that runs the checker on the main source set. The task is named
 * "check${shortName}", for example "checkPurity" or "checkNullness".
 * @param checker fully-qualified name of the checker to run
 * @param shortName short name of the checker, to use to name the task.
 */
def createCheckTypeTask(checker, shortName) {
    tasks.create(name: "check${shortName}", type: JavaCompile) {
        description "Run the ${shortName} Checker on the main sources."
        group 'Verification'
        String checkerDist = "${projectDir}/../../checker-framework/checker/dist"
        // Always run the task.
        outputs.upToDateWhen { false }
        source = sourceSets.main.java
        classpath = files("${checkerDist}/checker-qual.jar")
        classpath += sourceSets.main.compileClasspath
        destinationDirectory = file("${buildDir}/typecheck/${shortName}")

        options.annotationProcessorPath = files("${checkerDist}/checker.jar")
        options.compilerArgs += [
                '-processor', "${checker}",
                '-proc:only',
                '-Xlint:-processing',
                '-AwarnUnneededSuppressions',
        ]
        options.fork = true

        if (isJava8) {
            sourceCompatibility = 8
            targetCompatibility = 8
            options.compilerArgs += [
                    "-Xbootclasspath/p:${checkerDist}/jdk8.jar"
            ]
            options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.javacJar.asPath}".toString()]
        }
    }
}

// Create checkSignature task
createCheckTypeTask('org.checkerframework.checker.signature.SignatureChecker', 'Signature')

task htmlValidate(type: Exec) {
    description 'Validate that HTML files are well-formed.'
    workingDir '../'
    executable 'html5validator'
    args = [
            // The --ignore command-line argument applies to everything until the next
            // command-line argument; that is, everything listed here is ignored.
            "--ignore",
            "/annotation-file-utilities/annotation-file-format.html",
            "/api/",
            "/build/",
            "/javadoc/",
            "/plume-bib/",
            "/scene-lib/javadoc/"
    ]
}

test.dependsOn testExample
test.dependsOn testAnnotator

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:all', '-quiet')
    options.addStringOption('Xmaxwarns', '10000')
}

task javadocPrivate(type: Javadoc) {
  description = 'Run Javadoc in strict mode.'
  source = sourceSets.main.allJava
  classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath
  options.addStringOption('-Xdoclint:all', '-quiet')
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.addStringOption('Xmaxwarns', '10000')
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "org.plumelib:require-javadoc:1.0.2"
}
task requireJavadoc(type: JavaExec) {
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "annotation-file-utilities/src", "scene-lib/src"
  workingDir = "${projectDir}/.."
}
// check.dependsOn requireJavadoc

task updateUserOptions(type: Javadoc, dependsOn: 'assemble') {
  description "Updates printed documentation of command-line arguments."

  // source = sourceSets.main.allJava.files.sort()
  exclude 'scenelib.annotations.io.classfile/**'
  classpath = project.sourceSets.main.compileClasspath + project.sourceSets.main.runtimeClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.runtimeClasspath as List
  options.doclet = "org.plumelib.options.OptionsDoclet"
  options.addStringOption("docfile", "${projectDir}/src/annotator/Main.java")
  options.addStringOption("format", "javadoc")
  options.addStringOption("i", "-quiet")
  title = ""
}

artifacts {
    archives shadowJar
    archives skinnyJar
    archives allButJavacJar
}

clean {
    dependsOn(cleanTestAnnotator, cleanAnnotationFileFormat, cleanTestExample)
    delete('annotation-file-utilities.jar','annotation-file-utilities-all.jar', 'annotation-tools.zip')
}

ext.tmpAnnotationTools = "${buildDir}/tmp-annotation-tools"
task cloneAndPrepDirectoryForZipfile {
    dependsOn(assemble, makeAnnotationFileFormat)
    description 'Copy files from repository to temporary directory from which they will be packaged up.'
    doLast {
        delete tmpAnnotationTools
        exec {
            executable 'git'
            args = [
                    'clone',
                    '../',
                    "${tmpAnnotationTools}"
            ]
        }
        delete "${tmpAnnotationTools}/scene-lib.orig-hand-annos"
        delete "${tmpAnnotationTools}/.git"
        delete "${tmpAnnotationTools}/.gitignore"
        delete "${tmpAnnotationTools}/.hg_archival.txt"
        delete "${tmpAnnotationTools}/.hgignore"
        copy {
            from projectDir
            into "${tmpAnnotationTools}/annotation-file-utilities"
            include "annotation-file-format.dvi"
            include "annotation-file-format.html"
            include "annotation-file-format.pdf"
            include "annotation-file-utilities.jar"
            include "annotation-file-utilities-all.jar"
        }
    }
}

task zipfile(type: Zip) {
    description "create the distribution: annotation-tools.zip"
    dependsOn(cloneAndPrepDirectoryForZipfile)
    archiveFileName = 'annotation-tools.zip'
    destinationDirectory = projectDir
    from files(tmpAnnotationTools)
}

task copyToDeployDir {
    description 'copy release to deployDir.'
    doLast {
        String deployDir = project.getProperties().get("deploy-dir")
        String afuVersion = project.getProperties().get("afu.version")
        println("Export location: ${deployDir}")
        println("Copying annotation-tools.zip")
        copy {
            from projectDir
            into deployDir
            include 'annotation-tools.zip'
            include 'annotation-file-utilities.html'
            include 'annotation-file-format.html'
            include 'annotation-file-format.pdf'
            include 'figures/*.svg'
            include 'figures/*.png'
            include 'figures/*.gif'
            include 'changelog.html'
            rename('annotation-tools.zip', "annotation-tools-${afuVersion}.zip")
        }
        delete "${deployDir}/index.html"
        Files.createSymbolicLink(file("${deployDir}/index.html").toPath(), file("${deployDir}/annotation-file-utilities.html").toPath())
    }
}

task releaseBuild(type: GradleBuild) {
    description 'Build everything required for a release.'
    doFirst {
        if (!project.hasProperty('deploy-dir')) {
            throw new RuntimeException("You must specify a deploy-dir, the live site deploy-dir=/cse/www2/types/annotation-file-utilities/releases/_version num_")
        }
        if (!project.hasProperty('afu.version')) {
            throw new RuntimeException("You must specify an afu.version, such as 3.6.22")
        }
    }

    startParameter.projectProperties += gradle.startParameter.projectProperties
    startParameter.projectProperties += [release: true.toString()]

    tasks = ['clean', 'zipfile', 'testAnnotator', 'copyToDeployDir']
}


task pythonIsInstalled(type: Exec) {
  description "Check that the python3 executable is installed."
  executable = "python3"
  args "--version"
}


task setLocalRepo(type:Exec) {
    commandLine 'git', 'worktree', 'list'
    standardOutput = new ByteArrayOutputStream()
    doLast {
       String worktreeList = standardOutput.toString()
       localRepo = worktreeList.substring(0, worktreeList.indexOf(" ")) + "/.git"
    }
}

task installGitHooks(type: Copy, dependsOn: 'setLocalRepo') {
    description 'Copies git hooks to .git directory'
    from files(".git.pre-commit")
    rename('.git\\.(.*)', '$1')
    into localRepo + "/hooks"
}
compileJava.dependsOn installGitHooks


/// Code formatting

ext.formatScriptsHome = "${projectDir}/.run-google-java-format"

task getCodeFormatScripts() {
    description 'Obtain or update the run-google-java-format scripts'
    if (file(formatScriptsHome).exists()) {
        exec {
            workingDir formatScriptsHome
            executable 'git'
            args = ['pull', '-q']
            ignoreExitValue = true
        }
    } else {
        exec {
            workingDir "${formatScriptsHome}/../"
            executable 'git'
            args = ['clone', '-q', '--depth', '1', 'https://github.com/plume-lib/run-google-java-format.git', '.run-google-java-format']
        }
    }
}

/**
 * Returns a list of all the Java files that should be formatted for the given project. These are:
 *
 * All java files in the main sourceSet.
 * All java files in the tests directory that compile.
 *
 * @param projectName name of the project to format
 * @return a list of all Java files that should be formatted for projectName
 */
List<String> getJavaFilesToFormat(projectName) {
    List<File> javaFiles = new ArrayList<>();
    sourceSets.forEach { set ->
        javaFiles.addAll(set.java.files)
    }

    // Collect all java files in tests directory
    fileTree("tests").visit { details ->
        // If you change this, also change checker/bin-devel/git.pre-commit
        if (!details.path.contains("nullness-javac-errors")
                && !details.path.contains("returnsreceiverdelomboked")
                && !details.path.contains("build")
                && details.name.endsWith('java')) {
            javaFiles.add(details.file)
        }
    }

    List<String> args = new ArrayList<>();
    for (File f : javaFiles) {
        args += relativePath(f)
    }
    return args
}

task checkFormat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Format') {
    description 'Check whether the source code is properly formatted'
    executable 'python3'

    doFirst {
        args += "${formatScriptsHome}/check-google-java-format.py"
        args += getJavaFilesToFormat(project.name)
    }
    ignoreExitValue = true
    doLast {
        if (!executionResult.isPresent() || executionResult.get().getExitValue() != 0) {
            throw new RuntimeException('Found improper formatting, try running:  ./gradlew reformat"')
        }
    }
}

task reformat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Format') {
    description 'Format the Java source code'
    executable 'python3'
    doFirst {
        args += "${formatScriptsHome}/run-google-java-format.py"
        args += getJavaFilesToFormat(project.name)
    }
}
