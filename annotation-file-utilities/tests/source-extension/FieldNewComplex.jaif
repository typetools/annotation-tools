package GUT.quals:
annotation @Rep:
annotation @Peer:
annotation @Any:

package annotator.tests:
class FieldNewComplex:
field f:
new *1: @GUT.quals.Peer

package annotator.tests:
class FieldNewComplex:
field f:
new *2: @GUT.quals.Rep

package annotator.tests:
class FieldNewComplex:
method m(Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;)Lannotator/tests/FieldNewComplex;:
parameter 1:
type: @GUT.quals.Peer

package annotator.tests:
class FieldNewComplex:
field f:
new *0: @GUT.quals.Peer

package annotator.tests:
class FieldNewComplex:
field f:
type: @GUT.quals.Rep

package annotator.tests:
class FieldNewComplex:
method m(Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;)Lannotator/tests/FieldNewComplex;:
return: @GUT.quals.Rep

package annotator.tests:
class FieldNewComplex:
method m(Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;)Lannotator/tests/FieldNewComplex;:
parameter 2:
type: @GUT.quals.Rep

package annotator.tests:
class FieldNewComplex:
method m(Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;Lannotator/tests/FieldNewComplex;)Lannotator/tests/FieldNewComplex;:
parameter 0:
type: @GUT.quals.Peer
